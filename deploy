#!/bin/bash

# Simple bash deployment script for gnudoc
#
# Rebuilds the current docker, pushes it to the registry and then, on
# the remote: pulls and tries to start in a blue green way

# This is the script run on the remote machine
function remoteDeploy {
    # Pull the new dockers
    sudo docker.io pull nicferrier/elnode-gnudoc

    # What's the current deploy hosted on?
    CURRENTPORT=$(sudo sed -nre 's/.*(8[0-9]{3}).*/\1/p' /etc/nginx/sites-enabled/gnudoc.conf)

    # Pull out the IP/port of the dockers that are the correct image
    sudo docker.io ps -q |  while read dockid
    do 
        ( sudo docker.io inspect -f '{{ .Config.Image }}' $dockid \
            | grep nicferrier/elnode-gnudoc > /dev/null ) && echo $dockid
    done | while read dockid ;
    do
        echo "elnode-gnudoc $dockid docker found" > /dev/stderr
        # It's quite hard to access the keys of NetworkSettings.Ports
        printf "$dockid " ; sudo docker.io inspect $dockid \
            | jq -r '.[0] | .NetworkSettings.Ports | to_entries | map(select(.key == "8015/tcp")) | .[0] | .value | .[0] | .HostPort'
    done | while read dockid port 
    do
        echo "$dockid using $port" > /dev/stderr
        # Stop any elnode-gnudoc container that's running on a non-live port
        if [ "$CURRENTPORT" != "$port" ] 
        then
            echo "killing $dockid because it's not on $CURRENTPORT" > /dev/stderr
            sudo docker.io kill $dockid
        fi
        echo $dockid $port
    done | while read dockid port
    do
        # When we get here we should only have the live docker running
        if [ "$CURRENTPORT" == "$port" ]
        then
            local newport
            newport=$(expr $port + 1)
            echo "starting $dockid on $newport avoiding nginx on $CURRENTPORT" > /dev/stderr
            # Start the new docker
            sudo docker.io run -d -p $newport:8015 -t nicferrier/elnode-gnudoc # we could curl check here
            # Rewrite the nginx config
            sudo sed -ibk -re "s/$port/$newport/" /etc/nginx/sites-enabled/gnudoc.conf
            # Restart nginx
            sudo /etc/init.d/nginx reload
        fi
    done
}

cd $(dirname $0)
sudo docker build --no-cache -t nicferrier/elnode-gnudoc .

[ "$1" == "1" ] && exit 1

sudo docker push nicferrier/elnode-gnudoc

[ "$1" == "2" ] && exit 2

# Now the remote parts
( typeset -fp remoteDeploy ; echo remoteDeploy ) | ssh po5.ferrier.me.uk bash -

# deploy ends here
